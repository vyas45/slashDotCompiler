There are 3 main components to a computing system:

1. CPU
2. Registers
3. Memory

Code(or assembly instructions) are stored inside the "Memory" as binary data and "CPU" picks out these instructions one by one from memory to execute them; the running states of the system are stored in the "Registers"


1. Memory:
   ======

    Memory can be used to store either code(assembly instructions) or data(user data). Everything is stored in binary. Modern operating systems have the concept of virtual memory in which each program only needs to care about virtual memory and there are translations to the actual physical memory. The advantage of virtual memory is that it can hide the details of a physical memory from the programs. For example, in 32bit machine, all the available memory address is 2^32 = 4G while the actaul physical memory may be only 256M. The program will still think that it can have 4G memory to use, the OS will map them to physical ones.

Each program's usable memory is partitioned into several segments:

1. text segment : this stores code(instructions)
2. data segment : this stores initialized data (int i = 10)
3. bss  segment : this stores un-initialized data. (int i[1000])
4. stack segment : handles the state of function calls (caling frames/local variables)
5. heap segment : dynamic allocations for a program are held here


+------------------+
|    stack   |     |      high address
|    ...     v     |
|                  |
|                  |
|                  |
|                  |
|    ...     ^     |
|    heap    |     |
+------------------+
| bss  segment     |
+------------------+
| data segment     |
+------------------+
| text segment     |      low address
+------------------+

2. Registers:
   =========

   Registers are used to store the running state of the system. Our VM is going to use 4 of the registers :
   1. PC : (Program Counter) -> Stores the memory address to the next instruction
   2. SP : (Stack Pointer) -> Points to the top of stack. Also, this value reduces as stack grows downards (fig. above)
   3. BP : (Base Pointer) -> points to some elements on the stack and used in Function Calls. 
   4. AX : General register to store the result of the instruction

   In code, these are added as globals.


3. Instruction Set:
   ================

   These are a set of instructions that a CPU can understand. Here we define a basic language for our VM using an enum. 
The language is a subset of x86 instruction set. We have defined these instructions as: 

// instructions
enum { LEA ,IMM ,JMP ,CALL,JZ  ,JNZ ,ENT ,ADJ ,LEV ,LI  ,LC  ,SI  ,SC  ,PUSH,
       OR  ,XOR ,AND ,EQ  ,NE  ,LT  ,GT  ,LE  ,GE  ,SHL ,SHR ,ADD ,SUB ,MUL ,DIV ,MOD ,
       OPEN,READ,CLOS,PRTF,MALC,MSET,MCMP,EXIT };
  

Here are some instructions and their descriptions :

1. MOV:
   ===
    It is one of the most fundamental instruction. It moves data to and from registers/memory. There are two arguments
to a MOV instruction, src and dest. (Intel standard: MOV dest, source), source can be a number/register/memory address.

As we have only one general purpose register (AX) and it is difficult to determine the source type we implement MOV in 5 seperate pieces:

    1. IMM <num> to put immediate <num> into register AX.
    2. LC to load a character into AX from a memory address which is stored in AX before execution.
    3. LI just like LC but dealing with integer instead of character.
    4. SC to store the character in AX into the memory whose address is stored on the top of the stack.
    5. SI just like SC but dealing with integer instead of character.

    So, MOV is implemented like:

    if (op == IMM)       {ax = *pc++;}                   // load immediate value to ax
    else if (op == LC)   {ax = *(char *)ax;}             // load character to ax, address in ax
    else if (op == LI)   {ax = *(int *)ax;}              // load integer to ax, address in ax
    else if (op == SC)   {ax = *(char *)*sp++ = ax;}     // save character to address, value in ax, address on stack
    else if (op == SI)   {*(int *)*sp++ = ax;}           // save integer to address, value in ax, address on stack















***************************************************************************************************

Compiled v/s interpreted languages:
===================================

(from Stackoverflow):

A compiled language is one where the program, once compiled, is expressed in the instructions of the target machine. For example, an addition "+" operation in your source code could be translated directly to the "ADD" instruction in machine code.

An interpreted language is one where the instructions are not directly executed by the target machine, but instead read and executed by some other program (which normally is written in the language of the native machine). For example, the same "+" operation would be recognised by the interpreter at run time, which would then call its own "add(a,b)" function with the appropriate arguments, which would then execute the machine code "ADD" instruction.

You can do anything that you can do in an interpreted language in a compiled language and vice-versa - they are both Turing complete. Both however have advantages and disadvantages for implementation and use.

I'm going to completely generalise (purists forgive me!) but, roughly, here are the advantages of compiled languages:

Faster performance by directly using the native code of the target machine
Opportunity to apply quite powerful optimisations during the compile stage
And here are the advantages of interpreted languages:

Easier to implement (writing good compilers is very hard!!)
No need to run a compilation stage: can execute code directly "on the fly"
Can be more convenient for dynamic languages
Note that modern techniques such as bytecode compilation add some extra complexity - what happens here is that the compiler targets a "virtual machine" which is not the same as the underlying hardware. These virtual machine instructions can then be compiled again at a later stage to get native code (e.g. as done by the Java JVM JIT compiler).


***************************************************************************************************
